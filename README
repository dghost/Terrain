Procedurally generated terrain

Description: Static meshes deformed and manipulated using procedurally generated textures.

Framework used: Qt 4.8.4, but it should be compatible with Qt 4.7 (and probably 4.6). It also seems to work under Qt 5.0.0 and higher.

Additional dependencies: GLM (included)

Compilation/execution (under Ubuntu):
1) qmake
2) make
3) ./Terrain

It will compile and run under Ubuntu, OS X, and Windows (so long as Qt 4.8 is used). Unfortunately, the only Ubuntu machine I could test it on had Intel integrated graphics and appeared to have problems calculating normals on the mesh. This appears to be an issue related to the drivers as it works on other configurations.

Details:

The program generates two different meshes (one flat mesh composed of 512 * 512 * 2 triangles and one sphere mesh) and three textures (one for the sky, ground, and water). Using a framebuffer object, 3D Simplex noise is rendered into the sky texture, 3D Perlin noise is rendered into the ground texture, and 2D Flow noise combined with some 3D Simplex noise is rendered into the water texture. On each frame, the sky and water textures are re-rendered with slightly different parameters to provide the illusion of animation. After re-rendering these textures, the flat mesh is rendered twice (once for the terrain, once for water) and the sphere is rendered to provide the skydome. 

In shaders, the following occurs:
The skydome is resized and textured. The fragment shader samples the cloud texture at the appropriate xy coordinate and blends the result with an interpolated blue value (lighter at the horizon, darker at the apex) to provide an illusion of clouds in the sky.

The terrain is deformed and colored based off the ground texture (which is only regenerated on demand). By sampling the ground texture in the vertex shader it is possible to transform the vertex location based off of the value stored in the texture. By sampling adjacent pixels/locations it is possible to determine the normal value for the vertex as well. The height, texture coordinates, normal, and view vector are sent to the fragment shader which uses them to generate a base color based on the height of the fragment in the world, and then lighting is applied by applying ambient lighting and then a portion of diffuse lighting that is the product of directional lighting weight and the intensity of the clouds at that fragments x/y location. In this sense, cloud coverage will appear to block diffuse light from the direction light (sun).

The water works almost the same way, but with a few key differences. Instead of the fragment color being determined by height it is set to a constant light blue color. In addition to diffuse lighting, the water also features specular reflections. Additionally, the normals are exaggerated in shaders so that the reflection appears more distorted than the actual mesh is. The "shininess" of the specular reflection is altered based on cloud coverage, and the alpha transparency of the fragment is determined by the intensity of light that is currently hitting the fragment.

Movement through the world is accomplished through standard WSAD keys and the mouse. The 'W' and 'S' key goes forward and backwards and the 'A' and 'D' key moves left and right respectively. The 'Q' and 'E' keys adjust the height of the camera, and the mouse pans and tilts the camera.

Additionally, there are other features to work with. The 'X' key toggles wireframes on/off, the 'B' key toggles alpha blending for water on/off, the 'H' key toggles the HUD on/off, the 'F' key toggles fullscreen on/off, and the 'Escape' key quits the program. Additionally, Control-T toggles rendering the terrain on/off, Control-W toggles rendering the water on/off, and Control-R forces regeneration of the terrain texture. The spacebar pauses updating of the textures.


Performance testing:
There are several parameters that can be adjusted on the fly to test performance differences:
-Water and ground mesh size individually, with the mesh ranging from a 256x256 vertex square to a 2048x2048 vertex square in increments of 256 vertices.
-The size of the ground, water, and cloud textures individually, with each texture ranging from 256x256 to 2048x2048 pixels in increments of 256 pixels.
-The shader used to render the water and the ground invidiually. The water shader can be toggled between three different shaders described above, and the ground can be toggled between the two shaders mentioned above.

To adjust these parameters:
The '1' key toggles between water shaders.
The '2' key toggles between ground shaders.
The '[' and ']' keys adjust the ground mesh size.
The 'O' and 'P' keys adjust the ground texture size.
The ';' and ''' keys adjust the water mesh size.
The 'K' and 'L' keys adjust the water texture size.
The ',' and '.' keys adjust the cloud texture size.